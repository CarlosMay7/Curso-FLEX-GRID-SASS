:root {
    --azul: #0071b7;
    --blanco: #FFF;
    --naranja: #ff4f1e;
}
html {
    font-size: 62.5%; /** 1REM = 10pX **/
}

body {
    background-color: var(--azul);
    font-family:  'Lato', sans-serif;
    font-size: 1.6rem;
}

.caja-curso {
    background-color: var(--naranja);
    text-align: center;
    color: var(--blanco);
    padding: 5rem;

}
.caja-curso h1 {
    margin: 0;
}
.caja-curso p {
    font-size: 2.4rem;
}
.caja-curso a {
    font-size: 2.4rem;
    padding: 2rem;
    display: inline-block;
    text-decoration: none;
    color: var(--blanco);
    padding: 0;
}


h1, h2 {
    color: var(--blanco);
    text-align: center;
    margin: 5rem 0;
}

.contenedor {
    max-width: 120rem;
    margin: 0 auto;
}
.box {
    background-color: var(--naranja);
    color: var(--blanco);
    padding: 5rem;
    display: flex;
    justify-content: center;
    align-items: center;
    font-size: 4rem;
    margin-bottom: 2rem;
}

/*1*/

.grid-1 {
    display: grid;
}

/*2*/

.grid-2 {
    display: grid;
    grid-template-columns: 300px 300px 300px;
}

.grid-2 .box:nth-child(2) {
    grid-column-start: 1; /*Busca las columnas del grid y coloca el elemento entre el espacio de los dos*/
    grid-column-end: 2;

    grid-column: 1 / 2; /*Lo mismo pero shorthand, el primero es el inicio y el segundo el final*/
}

/*3*/

.grid-3 {
    display: grid;
    grid-template-rows: repeat(2, 300px);
    grid-template-columns: repeat(3, 300px);

}

.grid-3 .box:nth-child(2) { /*Funciona parecido al column*/
    grid-row-start: 1;
    grid-row-end: 2;

    grid-row: 1 / 2;
}

/*4*/

.grid-4 {
    display: grid;
    grid-template-rows: repeat(3, 300px);
    grid-template-columns: repeat(3, 300px);
}

.grid-4 .box:nth-child(2){
    /*Es lo mismo*/
    grid-column: 2 / 4;
    grid-column: 2 / span 2; /*Con el span le dice la cantidad de columnas que quiere que ocupe desde la que se le asigna*/

    grid-row: 2 / 2;
    grid-row: 2 / span 2;
}

/*5*/

.grid-5 {
    display: grid;
    grid-template-rows: repeat(2, 300px);
    grid-template-columns: repeat(3, 300px);

    grid: repeat(2, 300px) / repeat(3, 300px); /*Primero va rows y luego columns*/
}

/*6*/

.grid-6 {
    display: grid;

    grid: repeat(2, 300px) / repeat(3, 300px);
    grid-auto-flow: dense; /*Hace que se aproveche mas el grid al mover los elementos de posicion, llena el espacio que se deja al cambiar de column y row*/
}

.grid-6 .boc:nth-child(2){
    grid-column: 1 / 2;
}

/*7*/

.grid-7 {
    display: grid;
    grid-template-columns: repeat(4, 1fr); /*Se generan los calculos para tener el espacio segun las fracciones*/
    grid: repeat(2, 50rem), repeat(3, 1fr); /*Al usar en las rows se tiene que tener una altura sino no tiene una medida para dividir*/
}

/*8*/

.grid-8 {
    display: grid;
    grid: repeat(2, 20rem), repeat(3, 1fr);

    column-gap: 4rem;
    row-gap: 4rem;

    gap: 4rem, 1rem; /*Row, column*/
}

.grid-8 .box{
    margin: 0;
}

/*9*/

.grid-9 {
    display: grid;
    height: 120rem;
    /*es como dibujar la cuadricula*/
    grid-template-areas: "header header header"
                         "nav nav nav"
                         "contenido contenido sidebar"
                         "footer footer footer"
    ;
    grid-template-columns: repeat(3, 1fr);
    grid-template-rows: 2.5fr 1fr 6fr 2.5fr;
    gap: 4rem;
}

.grid-9 .box {
    margin: 0;
}

.grid-9 .box:nth-child(1){
    grid-area: header;
}
.grid-9 .box:nth-child(2){
    grid-area: nav;
}
.grid-9 .box:nth-child(3){
    grid-area: contenido;
}
.grid-9 .box:nth-child(4){
    grid-area: sidebar;
}
.grid-9 .box:nth-child(5){
    grid-area: footer;
}

/*10*/

.grid-10 {
    display: grid;
    height: 120rem;
    /*es como dibujar la cuadricula pero con las medidas de cada row*/
    /*Primero nombre del area, la medida de la row y al final la medida de las columnas*/
    grid-template: "header header header" 2.5fr
                    "nav nav nav" 1fr
                    "contenido contenido sidebar" 6fr
                    "footer footer footer" 2.5fr /*/ 1fr 1fr 1fr no se puede usar el repeat*/
    ;
    grid-template-columns: repeat(3, 1fr);
    gap: 4rem;
}

.grid-10 .box {
    margin: 0;
}

.grid-10 .box:nth-child(1){
    grid-area: header;
}
.grid-10 .box:nth-child(2){
    grid-area: nav;
}
.grid-10 .box:nth-child(3){
    grid-area: contenido;
}
.grid-10 .box:nth-child(4){
    grid-area: sidebar;
}
.grid-10 .box:nth-child(5){
    grid-area: footer;
}

/*11*/

.grid-11 {
    display: grid;
    grid-template-columns: repeat(6, 1fr);
    height: 30rem;
    align-items: center;
    place-content: stretch; /*Hace como align-items y justify-content pero no hay justify en grid*/
    align-content: end;
}

/*12*/

.grid-12 {
    display: grid;
    grid-template-columns: repeat(auto-fill, 200px); /*Genera columnas del mismo tama√±o aunque ya no haya mas contenido*/
    grid-template-columns: repeat(auto-fit, 200px); /*Genera las columnas necesarias*/

    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); /*Genera las columnas necesarias y con el minmax siempre que pueda toma el valor maximo(derecha) y divide el contenido, pero si llega a quedar por debajo del valor minimo (izq) entonces genera otra ro2 y le da el valor maximo a cada elemento*/
}